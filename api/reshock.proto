syntax = "proto3";
package reshock;

service Reshock {
  rpc DumpState(Empty) returns (StateDumpResponse);
  rpc ProcessAction(ActionRequest) returns (EventsResponse);
}

message Empty {}

message DoorComponent {
  bool open = 1;
}

message RenderableComponent {
  enum Renderable {
    NONE = 0;
    HUMAN = 1;
    SERV_BOT = 2;
    FLOOR = 3;
    WALL = 4;
    DOOR = 5;
    MELEE = 6;
    PROJECTILE_GUN = 7;
    ENERGY_GUN = 8;
    MAGAZINE = 9;
    CORPSE = 10;
  }

  Renderable renderable = 1;
}

message PositionComponent {
  int32 x = 1;
  int32 y = 2;
}

message MemoryComponent {}

message WallComponent {}

message Components {
  PositionComponent position = 1;
  RenderableComponent renderable = 2;
  optional DoorComponent door = 4;
  optional MemoryComponent memory = 5;
  optional WallComponent wall = 6;
}

message State {
  map<uint32, Components> entities = 1;
}

message Dimensions {
  int32 x = 1;
  int32 y = 2;
}

message Log {
  repeated string entries = 1;
}

message StateDumpResponse {
  uint32 player = 1;
  Dimensions dimensions = 2;
  State view = 3;
  Log log = 4;
}

message ActionRequest {
  enum DwimAction {
    UP_LEFT = 0;
    UP = 1;
    UP_RIGHT = 2;
    RIGHT = 3;
    DOWN_RIGHT = 4;
    DOWN = 5;
    DOWN_LEFT = 6;
    LEFT = 7;
    CLOSE = 8;
  }

  message GodModeAction {}

  oneof action {
    DwimAction dwim = 1;
    GodModeAction god = 2;
  }
}

message MoveEvent {
  uint32 actor = 1;
  int32 x = 2;
  int32 y = 3;
}

message DoorEvent {
  uint32 actor = 1;
  uint32 door = 2;
  bool open = 3;
}

message ViewUpdateEvent {
  uint32 player = 1;
  State view = 2;
}

message SpotEvent {
  enum SpotSound {
    SERV_BOT = 0;
  }

  uint32 actor = 1;
  SpotSound sound = 2;
}

message LogEvent {
  string entry = 1;
}

message HitEvent {
  enum HitKind {
    LEAD_PIPE = 0;
    LASER_RAPIER = 1;
  }

  enum HitDirection {
    TOP = 0;
    TOP_RIGHT = 1;
    RIGHT = 2;
    BOTTOM_RIGHT = 3;
    BOTTOM = 4;
    BOTTOM_LEFT = 5;
    LEFT = 6;
    TOP_LEFT = 7;
    NONE = 8;
  }

  uint32 target = 1;
  HitKind kind = 2;
  HitDirection direction = 3;
}

message DeathEvent {
  enum DeathSound {
    HUMAN = 0;
    SERV_BOT = 1;
  }

  uint32 actor = 1;
  DeathSound sound = 2;
}

message Event {
  oneof event {
    ViewUpdateEvent view = 1;
    MoveEvent move = 2;
    DoorEvent door = 3;
    SpotEvent spot = 4;
    LogEvent log = 5;
    HitEvent hit = 6;
    DeathEvent death = 7;
  }
}

message EventsResponse {
  repeated Event events = 1;
}
