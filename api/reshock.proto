syntax = "proto3";
package reshock;

service Reshock {
  rpc DumpState(Empty) returns (StateDumpResponse);
  rpc ProcessAction(ActionRequest) returns (EventsResponse);
}

message Empty {}

message DoorComponent {
  bool open = 1;
}

message RenderableComponent {
  enum Renderable {
    NONE = 0;
    HUMAN = 1;
    SERV_BOT = 2;
    FLOOR = 3;
    WALL = 4;
    DOOR = 5;
  }
  Renderable renderable = 1;
}

message OrderingComponent {
  enum Ordering {
    FLOOR = 0;
    DOOR = 1;
    WALL = 2;
    OTHER = 3;
  }
  Ordering ordering = 1;
}

message PositionComponent {
  int32 x = 1;
  int32 y = 2;
}

message MemoryComponent {}

message WallComponent {}

message Components {
  PositionComponent position = 1;
  RenderableComponent renderable = 2;
  OrderingComponent ordering = 3;
  optional DoorComponent door = 4;
  optional MemoryComponent memory = 5;
  optional WallComponent wall = 6;
}

message State {
  map<uint32, Components> entities = 1;
}

message Dimensions {
  int32 x = 1;
  int32 y = 2;
}

message StateDumpResponse {
  uint32 player = 1;
  Dimensions dimensions = 2;
  State view = 3;
}

message ActionRequest {
  enum DwimAction {
    UP_LEFT = 0;
    UP = 1;
    UP_RIGHT = 2;
    RIGHT = 3;
    DOWN_RIGHT = 4;
    DOWN = 5;
    DOWN_LEFT = 6;
    LEFT = 7;
  }

  message GodModeAction {}

  oneof action {
    DwimAction dwim = 1;
    GodModeAction god = 2;
  }
}

message MoveEvent {
  uint32 entity = 1;
  int32 x = 2;
  int32 y = 3;
}

message DoorEvent {
  uint32 actor = 1;
  uint32 door = 2;
  bool open = 3;
}

message ViewUpdateEvent {
  uint32 player = 1;
  State view = 2;
}

message Event {
  oneof event {
    ViewUpdateEvent view = 1;
    MoveEvent move = 2;
    DoorEvent door = 3;
  }
}

message EventsResponse {
  repeated Event events = 1;
}
